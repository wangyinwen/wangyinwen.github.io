<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python日志管理工具logging如何消除重复打印问题，以及在项目中如何应用</title>
    <link href="/2021/04/22/python%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7logging%E5%A6%82%E4%BD%95%E6%B6%88%E9%99%A4%E9%87%8D%E5%A4%8D%E6%89%93%E5%8D%B0%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8/"/>
    <url>/2021/04/22/python%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7logging%E5%A6%82%E4%BD%95%E6%B6%88%E9%99%A4%E9%87%8D%E5%A4%8D%E6%89%93%E5%8D%B0%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="有这样一篇文章是解决重复打印的"><a href="#有这样一篇文章是解决重复打印的" class="headerlink" title="有这样一篇文章是解决重复打印的"></a>有这样一篇文章是解决重复打印的</h2><p><a href="https://blog.csdn.net/u011417820/article/details/112861970">https://blog.csdn.net/u011417820/article/details/112861970</a></p><ul><li>问题二其实不用考虑，因为不会有人在一个脚本里创建两个logger</li><li>问题一重复打印的问题，可以通过传递__name__或者if判断句柄两个其一进行解决，传递__name__就是为了避免生成相同name的logger对象，就会重复logg.addhandler，其实通过if判断句柄也可以达到相同的效果</li><li>关于为什么非要用一个类封装，一方面是面向对象的编程模式，另一方面也是为了以后可以扩展，其实也可以用一个函数代替，比如下面的例子</li></ul><h2 id="如何在项目中实际应用"><a href="#如何在项目中实际应用" class="headerlink" title="如何在项目中实际应用"></a>如何在项目中实际应用</h2><ul><li>除了封装成class，也可以<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_logger</span>(<span class="hljs-params">name, output_dir=<span class="hljs-string">&#x27;.log&#x27;</span></span>)</span><br>logger = logging.getLogger(name)<br>logger.setLevel(logging,INFO)<br>formatter = logging.Formatter(<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s&quot;</span>)<br><br><span class="hljs-comment"># log to file</span><br>os.makedirs(output_dir, exist_ok=<span class="hljs-literal">True</span>)<br>timestamp = time.strftime(<span class="hljs-string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime())<br>filename = os.path.join(output_dir, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;timestamp&#125;</span>.log&#x27;</span>)<br>fh = logging.FileHandler(filename)<br>fh.setFormatter(formatter)<br>logger.addHandler(fh)<br><br><span class="hljs-comment"># log to console</span><br>ch = logging.StreamHandler()<br>ch.setFormatter(formatter)<br>logger.addHandler(ch)<br><br><span class="hljs-keyword">return</span> logger<br><br></code></pre></td></tr></table></figure></li><li>但是有一个问题是，如果在多个文件中调用，就会多次执行<code>fh = logging.FileHandler(filename)</code>创建出多个log文件，因为不同文件传进来的__name__是不一样的，如果想只创建一个log文件，可以不传入name，改用句柄判断如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_logger</span>(<span class="hljs-params">output_dir=<span class="hljs-string">&#x27;.log&#x27;</span></span>)</span><br>logger = logging.getLogger()<br>logger.setLevel(logging,INFO)<br>formatter = logging.Formatter(<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> logger.hasHandlers():<br>        <span class="hljs-comment"># log to file</span><br>        os.makedirs(output_dir, exist_ok=<span class="hljs-literal">True</span>)<br>        timestamp = time.strftime(<span class="hljs-string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime())<br>        filename = os.path.join(output_dir, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;timestamp&#125;</span>.log&#x27;</span>)<br>        fh = logging.FileHandler(filename)<br>        fh.setFormatter(formatter)<br>        logger.addHandler(fh)<br><br>        <span class="hljs-comment"># log to console</span><br>        ch = logging.StreamHandler()<br>        ch.setFormatter(formatter)<br>        logger.addHandler(ch)<br><br><span class="hljs-keyword">return</span> logger<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
